import CommandException from '../command/exception'

/**
 * A simple tokenizer that splits a string using space as
 * a delimiter. Tokenizers are known for being used in
 * all types of parsers. So even if this tokenizer is
 * a simple one, it is still preferable than a
 * no-tokenizer approach. Using tokenizer
 * will allow for easily incorporating
 * new and complex features into the
 * parser
 */
class StringTokenizer {
  /**
   * Creates a new StringTokenizer instance
   * @param {string} line the line to tokenize
   */
  constructor (line) {
    if (!line) {
      throw new CommandException(
        `trying to create a tokenizer with invalid input: ${line}`)
    }
    this.currentIndex = -1
    this.tokenArray = line.split(' ').filter(token => token !== '')
  }

  /**
   * Get the next token in the input
   * @returns {string} the current token generated by the tokenizer
   */
  nextToken () {
    this.currentIndex++
    if (this.currentIndex >= this.tokenArray.length) return ''
    return this.tokenArray[this.currentIndex].trim()
  }

  /**
   * Is there a token available in the input?
   * @returns {boolean} true is there are tokens left to process
   */
  hasMoreTokens () {
    return this.currentIndex + 1 < this.tokenArray.length
  }

  /**
   * Counts the number of tokens in the tokenizer
   * @returns {number} the number of tokens in the tokenizer
   */
  countTokens () {
    return this.tokenArray.length
  }
}
export default StringTokenizer
